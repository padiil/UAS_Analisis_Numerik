<!DOCTYPE html>
<html>
  <head>
    <title>Prediksi Pertumbuhan PDRB</title>
    <link
      rel="stylesheet"
      type="text/css"
      href="{{ url_for('static', filename='style.css') }}"
    />
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
      table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
      }
      th,
      td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
      }
      th {
        background-color: #f2f2f2;
      }
      .graph-container {
        margin-bottom: 40px;
      }
      .line {
        fill: none;
        stroke: steelblue;
        stroke-width: 2px;
      }
      .line-predicted {
        fill: none;
        stroke: orange;
        stroke-width: 2px;
        stroke-dasharray: 5 5; /* Garis putus-putus untuk prediksi */
      }
      .dot {
        fill: steelblue;
        stroke: white;
        stroke-width: 1.5px;
      }
      .dot-predicted {
        fill: orange;
        stroke: white;
        stroke-width: 1.5px;
      }
      .tooltip {
        position: absolute;
        text-align: center;
        width: 120px;
        height: 28px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 1px solid none;
        border-radius: 8px;
        pointer-events: none;
        opacity: 0;
      }
    </style>
  </head>
  <body>
    <h1>Prediksi Pertumbuhan PDRB Provinsi di Indonesia</h1>

    <form method="POST">
      <button type="submit">Lihat Prediksi</button>
    </form>

    {% if predictions %}
    <div class="graph-container">
      <h2>Prediksi Nasional</h2>
      <div id="national-graph"></div>
      <h3>Tabel Prediksi Nasional</h3>
      <table id="national-prediction-table">
        <thead>
          <tr>
            <th>Tahun</th>
            <th>Prediksi Pertumbuhan (%)</th>
          </tr>
        </thead>
        <tbody>
          {% for year, prediction in predictions.Nasional %}
          <tr>
            <td>{{ year }}</td>
            <td>{{ "%.2f" | format(prediction) }}</td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>

    <h2>Prediksi per Provinsi</h2>
    <div id="provincial-graphs">
      {% for provinsi, preds in predictions.items() %} {% if provinsi !=
      'Nasional' %}
      <div class="graph-container">
        <h3>{{ provinsi }}</h3>
        <div id="graph-{{ loop.index }}"></div>
        <h4>Tabel Prediksi {{ provinsi }}</h4>
        <table>
          <thead>
            <tr>
              <th>Tahun</th>
              <th>Prediksi Pertumbuhan (%)</th>
            </tr>
          </thead>
          <tbody>
            {% for year, prediction in preds %}
            <tr>
              <td>{{ year }}</td>
              <td>
                {% if prediction is string %} {{ prediction }} {% else %} {{
                "%.2f" | format(prediction) }} {% endif %}
              </td>
            </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
      {% endif %} {% endfor %}
    </div>

    <p>
      <strong>Catatan:</strong> Prediksi ini didasarkan pada model regresi
      linier sederhana menggunakan data historis yang tersedia. Akurasi prediksi
      dapat bervariasi.
    </p>

    <script>
      var predictions = {{ predictions | tojson }};
      var pdrb_data = {{ pdrb_data | tojson }};

      var margin = {top: 20, right: 30, bottom: 40, left: 50},
          width = 600 - margin.left - margin.right,
          height = 300 - margin.top - margin.bottom;

      function drawGraph(historicalData, predictedData, containerId) {
          var combinedData = historicalData.concat(predictedData);

          if (!combinedData || combinedData.length === 0 || (historicalData.length > 0 && typeof historicalData[0][0] === 'string')) {
              d3.select("#" + containerId).html("<p>Tidak cukup data untuk menampilkan grafik.</p>");
              return;
          }

          var svg = d3.select("#" + containerId)
              .append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.bottom + margin.top)
              .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          var x = d3.scaleLinear()
              .domain(d3.extent(combinedData, function(d) { return d[0]; }))
              .range([0, width]);
          svg.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x).tickFormat(d3.format("d")));

          var y = d3.scaleLinear()
              .domain(d3.extent(combinedData, function(d) { return d[1]; }))
              .range([height, 0]);
          svg.append("g")
              .call(d3.axisLeft(y));

          // Garis Historis
          var lineHistorical = d3.line()
              .x(function(d) { return x(d[0]); })
              .y(function(d) { return y(d[1]); });

          svg.append("path")
              .datum(historicalData)
              .attr("class", "line")
              .attr("d", lineHistorical);

          // Garis Prediksi
          var linePredicted = d3.line()
              .x(function(d) { return x(d[0]); })
              .y(function(d) { return y(d[1]); });

          // Temukan tahun terakhir data historis
          var lastHistoricalYear = d3.max(historicalData, function(d) { return d[0]; });

          // Filter data prediksi yang dimulai setelah tahun terakhir data historis
          var filteredPredictedData = predictedData.filter(function(d) {
              return d[0] > lastHistoricalYear;
          });

          // Gabungkan titik terakhir data historis dengan data prediksi
          var combinedPredictedData = [];
          if (historicalData.length > 0) {
              combinedPredictedData.push(historicalData[historicalData.length - 1]);
          }
          combinedPredictedData = combinedPredictedData.concat(filteredPredictedData);

          if (combinedPredictedData.length > 1) {
              svg.append("path")
                  .datum(combinedPredictedData)
                  .attr("class", "line-predicted")
                  .attr("d", linePredicted);
          }


          // Tooltip
          var tooltip = d3.select("body").append("div")
              .attr("class", "tooltip")
              .style("opacity", 0);

          // Titik-titik data historis
          svg.selectAll(".dot-historical")
              .data(historicalData)
              .enter().append("circle")
              .attr("r", 5)
              .attr("cx", function(d) { return x(d[0]); })
              .attr("cy", function(d) { return y(d[1]); })
              .attr("class", "dot")
              .on("mouseover", function(event, d) {
                  tooltip.transition()
                      .duration(200)
                      .style("opacity", .9);
                  tooltip.html("Tahun: " + d[0] + "<br/>Pertumbuhan: " + d3.format(".2f")(d[1]) + "%")
                      .style("left", (event.pageX + 10) + "px")
                      .style("top", (event.pageY - 28) + "px");
              })
              .on("mouseout", function(d) {
                  tooltip.transition()
                      .duration(500)
                      .style("opacity", 0);
              });

          // Titik-titik data prediksi
          svg.selectAll(".dot-predicted")
              .data(filteredPredictedData)
              .enter().append("circle")
              .attr("r", 5)
              .attr("cx", function(d) { return x(d[0]); })
              .attr("cy", function(d) { return y(d[1]); })
              .attr("class", "dot-predicted")
              .on("mouseover", function(event, d) {
                  tooltip.transition()
                      .duration(200)
                      .style("opacity", .9);
                  tooltip.html("Tahun (Prediksi): " + d[0] + "<br/>Pertumbuhan: " + d3.format(".2f")(d[1]) + "%")
                      .style("left", (event.pageX + 10) + "px")
                      .style("top", (event.pageY - 28) + "px");
              })
              .on("mouseout", function(d) {
                  tooltip.transition()
                      .duration(500)
                      .style("opacity", 0);
              });

          // Label Sumbu X
          svg.append("text")
              .attr("transform", "translate(" + (width/2) + " ," + (height + margin.top + 20) + ")")
              .style("text-anchor", "middle")
              .text("Tahun");

          // Label Sumbu Y
          svg.append("text")
              .attr("transform", "rotate(-90)")
              .attr("y", 0 - margin.left)
              .attr("x",0 - (height / 2))
              .attr("dy", "1em")
              .style("text-anchor", "middle")
              .text("Pertumbuhan (%)");
      }

      // Gambar grafik nasional
      if (predictions && predictions.Nasional && pdrb_data && pdrb_data.Nasional) {
          drawGraph(pdrb_data.Nasional, predictions.Nasional, "national-graph");
      }

      // Gambar grafik per provinsi
      if (predictions && pdrb_data) {
          for (var provinsi in predictions) {
              if (provinsi !== 'Nasional' && pdrb_data[provinsi]) {
                  var containerId = "graph-" + Object.keys(predictions).indexOf(provinsi);
                  drawGraph(pdrb_data[provinsi], predictions[provinsi], containerId);
              }
          }
      }
    </script>
    {% endif %}
  </body>
</html>
